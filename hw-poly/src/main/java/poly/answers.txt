## CSE 331 hw-poly Questions
## Part 0
###########################################################################

1. Multiplication Pseudocode
r = p * q:
	set r = 0
	{inv: r = (p_0 + p_1 + ... + p_i) * q where p_i is the ith term in p}
	foreach term, t_p in p:
	    {inv2: x = t_p * (q_0 + ... + q_j-1)}
		foreach term, t_q in q:
			replace the degree of t_q with degree of t_q  plus degree of t_p
			replace the coefficient of t_q with coefficient of t_q  times coefficient of t_p
		add x to r using polynomial addition

2. Division Pseudocode
ans = p / q:
    ans = 0x^0
    rem = p
    {inv: p_pre = ans * q + rem}
    while degree of leading term of rem >= degree of leading term of q && rem != 0:
        set mul = leading term of rem / leading term of q
        ans += mul
        rem -= mul * q

3. Division Example: (x3+x-1) / (x+1) = x2-x+2
p = x^3+x-1
q = x+1
ans = 0x^0
rem = x^3+x-1
while degree of leading term of rem >= degree of leading term of q && rem != 0 (YES: 3 >= 1):
    mul = x^3 / x = x^2
    ans += x^2 so ans = x^2
    rem -= x^2 * x+1 = x^3+x^2 so rem = -x^2+x-1
    while degree of leading term of rem >= degree of leading term of q && rem != 0 (YES: 2 >= 1):
        mul = -x^2 / x = -x
        ans += -x so ans = x^2 - x
        rem -= -x * x+1 = -x^2-x so rem = 2x-1
        while degree of leading term of rem >= degree of leading term of q && rem != 0 (YES: 1 >= 1):
            mul = 2x / x = 2
            ans += 2 so ans = x^2-x+2
            rem -= 2 * x+1 = 2x+2 so rem = -3
            while degree of leading term of rem >= degree of leading term of q && rem != 0 (FALSE: 0 < 1)
            We are done! ans = x^2-x+2

## Part 1
###########################################################################

1. Weakened Rep Invariant
The RatNum(int n, int d) constructor would no longer need to reduce the fraction. This would make the constructor more efficient by eliminating operations but slow down the performance of the program as a whole because other parts would have to separately reduce the function, creating redundancy
The equals method would have to introduce its own reduction algorithm to be able to correctly check if two fractions are equal since we could have two fractions 1/3 and 4/12 (currently the method only checks if the denominators and numerators are equal so it would return false). The original implementation wouldn't have to deal with this in the method so it would be more efficient
The toString method would have to introduce its own reduction algorithm since it has to return the fraction in reduced form. The original implementation would be more efficient here since that work would have already been handled in the constructor
checkRep just changes to check if the denominator is greater than or equal to 0. Advantages and disadvantages are written above since checkRep doesn't directly modify anything

2. Alternate add, sub, mul, div
Since there is no @spec.effects clauses on the four methods in question, they should not be changing the current object. The implementation in question would directly modify the current object, which fail to meet the documented (or undocumented) method specifications. Also, the class specification says that RatNum represents an immutable rational number, meaning that these 4 methods aren't allowed to change the object itself.

3. Constructor checkReps
Since numer and denom are both declared final and private and are both primitives, the constructor checks are sufficient because private means that only methods within RatNum have the possibility of modifying the two variables and final means that the constructor is the only place where the variables can be assigned. This effectively prevents any modification of numer and demon, meaning we only need to checkRep at the end of the constructor because they are unchangeable by other methods.

## Part 2
###########################################################################

1. Calls to checkRep in RatTerm
I only included it at tne end of my constructor because both coeff and expt are declared as final and private, and expt is a primitive and coeff is a RatNum which is immutable, meaning the only place they can be assigned are in the constructor. Thus, after the constructor assignments, they will never be changed, so I don't need to checkRep in my other methods

2. Weakened Rep Invariant
The RatNum constructor would no longer need to set the expt to 0. This barely has any effect on the efficiency of the constructor but decreases the overall performance of the program as other methods will have to do more internal calculations
The equals method would have to contain another check for if the coefficients of both RatTerms are zero instead of just checking if the expt and coeff are equal. This would be slightly more inefficient as there would be more cases to check for
The toString method would require an additional check to see if coeff is zero. This would slightly decrease the efficiency of the program as it would require an additional case
checkRep would no longer need to check if the exponent is zero when the coefficient is zero, which would slightly increase the efficiency

3. Alternate Rep Invariant
The RatNum constructor would have to check if the coeff is NaN and set expt to zero. This extra check would slightly decrease the efficiency
checkRep would have to check if the expt of coeff with NaN are equal to zero. This extra check would slightly decrease the efficiency

## Part 3
###########################################################################

1. Calls to checkRep in RatPoly
I decided to call checkRep at the end of all my constructors and at the beginning and end of all my public methods. This way I can immediately know where I have made a mistake no matter which method my rep invariant is broken in

2. Alternate Representation
The advantage is that we can now easily access the degree and the coefficient separately as RatNums and ints instead of RatTerms, meaning that it would be more efficient to access these properties of a polynomial. The disadvantage is that if we are making changes to the polynomial (e.g. adding polynomials to each other), we would have to edit two different lists and also take in two different lists to perform the addition, leading to a less efficient program. I prefer the list of RatTerms approach as it feels very concise and closer to a human representation (ax^b) instead of (a and b relating to x)


