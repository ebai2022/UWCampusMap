## CSE 331 hw-graph Part 1 Questions

## Part 1
###########################################################################

Briefly explain why you included the operations you did and why you feel they are a sufficient
interface to a graph. If your design includes multiple classes or interfaces, explain why you
included each one; if not, explain whether you considered additional classes and why you decided
not to include them.

I included the zero argument constructor just to initialize the state of the graph. addNode and addEdge
are all we need to be able to construct a graph from scratch, since it will allow us to add new nodes and
link existing ones. listChildren shows us all the children of a parent node, which will be useful when we
want to see where the edges of a parent node are going to. listNodes is great for seeing all the nodes in
the graph, giving us an overview of the entire graph. These 5 base methods are enough to ensure a sufficient
graph interface as they can set up all the basic functions of the graph and give the client a baseline of
information of what is in the graph. I did consider using additional classes, like using a subclass that
represents a node of the graph, but I decided to not include it because there's no added functionality I
can see for having a node that is separate from the overall graph class, because all it would store is a
string of the node data and a map containing its children and lists of edges to those children, all which
can be done within graph without having an additional subclass.


## Part 2
###########################################################################

What was your testing strategy for this assignment? How do your script tests and JUnit tests
differ from each other (if they do), and why?

My testing strategy for this assignment was to find all the general cases of different behaviors that might
cause my code to fail in different ways and test each one of those. The tests were generally split between
common cases (e.g. adding nodes to a single graph, adding nodes to multiple graphs at the same time) to
more special cases (e.g. having a self cyclic graph where the edge points to the same node it comes from).
Since I am not throwing any exceptions in my methods (and limiting my inputs by using specific spec requirements
like requiring all the strings passed in to not be null), everything is put in my script tests because they
can cover all the behavior I want to achieve. If I end up adding methods like containsNode or others like
that, I would use junit to test those to make sure my output is what I want, but for now, all my methods are
written with specs that are fully testable using script tests (e.g. for now, if I want to find a node using
what I might have as containNode in the future, I can just rely on listNodes being correct).